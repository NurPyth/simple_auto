name: Automated Tests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        default: second_test
        type: choice
        options:
          - first_test
          - second_test

jobs:
  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest allure-results artifact ID
        run: |
          ARTIFACTS=$(curl -s -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/NurPyth/simple_auto/actions/artifacts")
          
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "allure-results") | .id' | head -n 1)
          
          if [ -z "$ARTIFACT_ID" ]; then
            echo "No allure-results artifact found, proceeding without history."
            echo "ARTIFACT_ID=none" >> $GITHUB_ENV
          else
            echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          fi

      - name: Download artifact
        if: env.ARTIFACT_ID != 'none'
        run: |
          curl -L -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/NurPyth/simple_auto/actions/artifacts/$ARTIFACT_ID/zip" -o artifacts.zip

      - name: Debug artifact
        if: env.ARTIFACT_ID != 'none'
        run: |
          file artifacts.zip || echo "File check failed"
          ls -l artifacts.zip
          unzip -l artifacts.zip || echo "Failed to list zip contents"

      - name: Extract artifact
        if: env.ARTIFACT_ID != 'none'
        run: |
          mkdir -p allure-results
          unzip artifacts.zip -d allure-results || echo "Failed to unzip, proceeding without history"
          ls -l allure-results/ || echo "No files extracted"

      - name: Check allure-results content
        if: env.ARTIFACT_ID != 'none'
        run: |
          if [ -n "$(ls -A allure-results/)" ]; then
            echo "Files found in allure-results, proceeding with upload."
            echo "UPLOAD_HISTORY=true" >> $GITHUB_ENV
          else
            echo "No files in allure-results, skipping upload."
            echo "UPLOAD_HISTORY=false" >> $GITHUB_ENV
          fi

      - name: Store allure history
        if: env.ARTIFACT_ID != 'none' && env.UPLOAD_HISTORY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-results/
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: download-history
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: '135'
      - name: Install Chromedriver
        uses: nanasess/setup-chromedriver@v2
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Download Allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-results/
        continue-on-error: true
      - name: Start Xvfb for non-headless mode
        run: Xvfb :99 -screen 0 1920x1080x24 &
        env:
          DISPLAY: ':99'
      - name: Run first test
        if: github.event.inputs.deployment_target == 'first_test'
        run: pytest tests/test_button_page.py --alluredir=allure-results
        env:
          DISPLAY: ':99'
      - name: Run second test
        if: github.event.inputs.deployment_target == 'second_test'
        run: pytest tests/test_like_a_button_page.py --alluredir=allure-results
        env:
          DISPLAY: ':99'
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/
          retention-days: 1

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate Allure Report
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results/
      - name: Install Allure - Download and Extract
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.zip
          unzip allure-2.30.0.zip -d /opt/allure
          chmod +x /opt/allure/allure-2.30.0/bin/allure
          ls -l /opt/allure/allure-2.30.0/bin/
      - name: Install Allure - Update PATH and Verify
        run: |
          export PATH=$PATH:/opt/allure/allure-2.30.0/bin
          echo "/opt/allure/allure-2.30.0/bin" >> $GITHUB_PATH
          allure --version
      - name: Generate Allure report
        run: allure generate -c allure-results -o _site
      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: _site/
          retention-days: 1

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Publish Allure Report
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: _site/
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
