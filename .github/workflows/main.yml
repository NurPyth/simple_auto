name: Automated Tests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        default: second_test
        type: choice
        options:
          - first_test
          - second_test
          - ALL

jobs:
  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest artifact IDs
        id: get_artifacts
        run: |
          ARTIFACTS=$(curl -s -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/NurPyth/simple_auto/actions/artifacts")

          ALLURE_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '[.artifacts[] | select(.name == "allure-results")] | sort_by(.created_at) | reverse | .[0].id')
          PAGES_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '[.artifacts[] | select(.name == "github-pages")] | sort_by(.created_at) | reverse | .[0].id')

          echo "ALLURE_ARTIFACT_ID=${ALLURE_ARTIFACT_ID:-none}" >> $GITHUB_ENV
          echo "PAGES_ARTIFACT_ID=${PAGES_ARTIFACT_ID:-none}" >> $GITHUB_ENV

      - name: Download artifacts
        if: env.ALLURE_ARTIFACT_ID != 'none' || env.PAGES_ARTIFACT_ID != 'none'
        run: |
          if [ "$ALLURE_ARTIFACT_ID" != "none" ]; then
            curl -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/NurPyth/simple_auto/actions/artifacts/$ALLURE_ARTIFACT_ID/zip" -o artifacts.zip
          fi
          if [ "$PAGES_ARTIFACT_ID" != "none" ]; then
            curl -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/NurPyth/simple_auto/actions/artifacts/$PAGES_ARTIFACT_ID/zip" -o pages.zip
          fi

      - name: Extract artifacts
        run: |
          mkdir -p allure-results/history pages_history
          if [ -f artifacts.zip ]; then
            unzip artifacts.zip -d allure-results || echo "Failed to unzip allure-results"
            find allure-results -maxdepth 1 $ -name "*-trend.json" -o -name "history.json" $ -exec mv -v {} allure-results/history/ \;
          fi
          if [ -f pages.zip ]; then
            unzip pages.zip -d old_pages || echo "Failed to unzip githubpages"
            if [ -f old_pages/artifact.tar ]; then
              tar -xvf old_pages/artifact.tar -C pages_history || echo "Failed to extract artifact.tar"
            fi
          fi

      - name: Copy history from pages to allure
        run: |
          mkdir -p allure-results/history
          HISTORY_DIR=$(find pages_history -type d -name "history" | head -n 1)
          if [ -n "$HISTORY_DIR" ]; then
            echo "Found history in $HISTORY_DIR"
            cp -vr "$HISTORY_DIR"/* allure-results/history/ || echo "No history to copy"
          else
            echo "No history directory found"
          fi

      - name: Store allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-results/
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: download-history
    outputs:
      test_status: ${{ steps.set_test_status.outputs.test_status }}
    steps:
      - name: Debug deployment target
        run: echo "Deployment target: ${{ github.event.inputs.deployment_target }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: '135'

      - name: Install Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download Allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-results/
        continue-on-error: true

      - name: Start Xvfb for non-headless mode
        run: Xvfb :99 -screen 0 1920x1080x24 &
        env:
          DISPLAY: ':99'

      - name: Run tests based on deployment target
        id: run_tests
        run: |
          if [ "${{ github.event.inputs.deployment_target }}" == "first_test" ]; then
            pytest tests/test_button_page.py --alluredir=allure-results || echo "First test failed"
          elif [ "${{ github.event.inputs.deployment_target }}" == "second_test" ]; then
            pytest tests/test_like_a_button_page.py --alluredir=allure-results || echo "Second test failed"
          elif [ "${{ github.event.inputs.deployment_target }}" == "ALL" ]; then
            pytest tests/ --alluredir=allure-results || echo "All tests failed"
          else
            echo "Invalid deployment target."
            exit 1
          fi

      - name: Set test status
        id: set_test_status
        run: |
          if [ $? -eq 0 ]; then
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/
          retention-days: 1

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate Allure Report
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results/

      - name: Install Allure - Download and Extract
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.zip
          unzip allure-2.30.0.zip -d /opt/allure
          chmod +x /opt/allure/allure-2.30.0/bin/allure

      - name: Install Allure - Update PATH and Verify
        run: |
          export PATH=$PATH:/opt/allure/allure-2.30.0/bin
          echo "/opt/allure/allure-2.30.0/bin" >> $GITHUB_PATH
          allure --version

      - name: Generate Allure report
        run: |
          mkdir -p _site/history
          if [ -d allure-results/history ]; then
            echo "Copying history for report..."
            cp -vr allure-results/history/* _site/history/ || echo "Nothing to copy"
          fi
          allure generate allure-results -o _site --clean

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: _site/
          retention-days: 1

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Publish Allure Report
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: _site/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send Slack notification (Success)
        if: ${{ needs.test.outputs.test_status == 'success' }}
        run: |
          curl --location "https://hooks.slack.com/services/${{ secrets.SLACK }}" \
          --header "Content-Type: application/json" \
          --data "{\"text\": \":white_check_mark: Tests finished successfully! Report is here: https://nurpyth.github.io/simple_auto/\"}" \
          || echo "Failed to send Slack notification"

      - name: Send Slack notification (Failure)
        if: ${{ needs.test.outputs.test_status == 'failure' }}
        run: |
          curl --location "https://hooks.slack.com/services/${{ secrets.SLACK }}" \
          --header "Content-Type: application/json" \
          --data "{\"text\": \":no_entry: Tests failed! Report is here: https://nurpyth.github.io/simple_auto/\"}" \
          || echo "Failed to send Slack notification"
